#!/usr/bin/env python3
"""
Database Folder Setup Script
Creates proper database folder structure and moves existing files
"""

import os
import shutil
from pathlib import Path

def setup_database_folder():
    """Create database folder and move existing database files"""
    
    # Get current directory
    current_dir = Path.cwd()
    print(f"Current directory: {current_dir}")
    
    # Create database folder
    database_folder = current_dir / "database"
    database_folder.mkdir(exist_ok=True)
    print(f"✅ Created database folder: {database_folder}")
    
    # List of database files to move
    db_files = [
        "ysense_local.db",
        "ysense_privacy.db", 
        "ysense_v41.db"
    ]
    
    # Move existing database files
    moved_files = []
    for db_file in db_files:
        source_path = current_dir / db_file
        dest_path = database_folder / db_file
        
        if source_path.exists():
            shutil.move(str(source_path), str(dest_path))
            print(f"✅ Moved {db_file} to database folder")
            moved_files.append(db_file)
        else:
            print(f"⚠️ {db_file} not found, skipping")
    
    # Create database folder structure documentation
    readme_content = f"""# YSense Database Folder

## 📁 Database Files Location
This folder contains all YSense platform database files for better organization and security.

## 🗄️ Database Files:
{chr(10).join(f"- **{file}**: {get_db_description(file)}" for file in moved_files)}

## 🔒 Security Features:
- **Encrypted Storage**: All sensitive data encrypted
- **Backup Location**: Centralized backup management
- **Access Control**: Restricted access to database files
- **Version Control**: Database schema versioning

## 📊 Database Types:
- **ysense_local.db**: Primary wisdom storage vault
- **ysense_privacy.db**: Privacy and consent compliance
- **ysense_v41.db**: Platform version-specific data

## 🚀 Usage:
The database files are automatically managed by the YSense platform.
No manual intervention required for normal operation.

## 🛡️ Backup:
Regular backups are created automatically.
Backup files are stored with timestamp suffixes.

---
*Generated by YSense Platform v4.1 Database Manager*
"""

    readme_path = database_folder / "README.md"
    with open(readme_path, 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print(f"✅ Created database README: {readme_path}")
    
    # List final database folder contents
    print(f"\n📁 Database folder contents:")
    for item in database_folder.iterdir():
        if item.is_file():
            size = item.stat().st_size
            print(f"  📄 {item.name} ({size:,} bytes)")
        else:
            print(f"  📁 {item.name}/")
    
    return database_folder

def get_db_description(filename):
    """Get description for database file"""
    descriptions = {
        "ysense_local.db": "Primary wisdom storage vault - stores user stories, AI analysis, and attribution data",
        "ysense_privacy.db": "Privacy compliance vault - stores consent data, GDPR compliance, and privacy settings", 
        "ysense_v41.db": "Platform version data - stores v4.1 specific features and methodology data"
    }
    return descriptions.get(filename, "Database file")

if __name__ == "__main__":
    print("🗄️ Setting up YSense Database Folder Structure...")
    database_folder = setup_database_folder()
    print(f"\n🎉 Database folder setup complete!")
    print(f"📍 Location: {database_folder}")
    print(f"🔒 All database files are now organized in the dedicated folder")


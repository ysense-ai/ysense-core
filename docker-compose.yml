# docker-compose.yml
# YSense Platform v3.0 Development Environment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ysense-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-ysense}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ysense_secure_pwd_2024}
      POSTGRES_DB: ${DB_NAME:-ysense_v2}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256 --auth-local=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ysense-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ysense -d ysense_v2"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ysense-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-ysense_redis_2024}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ysense-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ysense-api
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - ./logs:/app/logs
    environment:
      # Database
      DATABASE_URL: postgresql://ysense:ysense_secure_pwd_2024@postgres:5432/ysense_v2
      REDIS_URL: redis://:ysense_redis_2024@redis:6379
      
      # Platform
      PLATFORM_VERSION: "2.0"
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: INFO
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-dev_secret_key_change_in_production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev_jwt_secret_change_in_production}
      
      # API Keys (from .env)
      QWEN_API_KEY: ${QWEN_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Revenue Settings
      BASE_RATE_EUR: "0.10"
      PLATFORM_FEE_PERCENTAGE: "15"
      COMMUNITY_SHARE_PERCENTAGE: "15"
      
      # Z Protocol
      ENABLE_Z_PROTOCOL: "true"
      Z_PROTOCOL_VERSION: "2.0"
      
      # Defensive Publication
      DEFENSIVE_PUBLICATION_DOI: "10.5281/zenodo.17072168"
      
      # Feature Flags
      ENABLE_MCP_SERVER: "false"
      ENABLE_DUAL_MODEL: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ysense-network
    restart: unless-stopped

  # Streamlit UI
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: ysense-streamlit
    command: streamlit run streamlit_app.py --server.port 8501 --server.address 0.0.0.0
    ports:
      - "8501:8501"
    volumes:
      - ./:/app
    environment:
      PLATFORM_VERSION: "2.0"
      API_BASE_URL: http://api:8000
      STREAMLIT_THEME_BASE: light
      STREAMLIT_THEME_PRIMARY_COLOR: "#667eea"
    depends_on:
      - api
    networks:
      - ysense-network
    restart: unless-stopped

  # MCP Server (Optional)
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    container_name: ysense-mcp
    ports:
      - "8081:8081"
    environment:
      MCP_VERSION: "2024-11-05"
      REDIS_URL: redis://:ysense_redis_2024@redis:6379
      DATABASE_URL: postgresql://ysense:ysense_secure_pwd_2024@postgres:5432/ysense_v2
    depends_on:
      - redis
      - postgres
    networks:
      - ysense-network
    profiles:
      - mcp  # Only starts when --profile mcp is used
    restart: unless-stopped

  # PgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ysense-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@ysense.ai}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_secure_2024}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - ysense-network
    profiles:
      - tools  # Only starts when --profile tools is used
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: ysense-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - streamlit
    networks:
      - ysense-network
    profiles:
      - production
    restart: unless-stopped

volumes:
  postgres_data:
    name: ysense_postgres_data
  redis_data:
    name: ysense_redis_data
  pgadmin_data:
    name: ysense_pgadmin_data

networks:
  ysense-network:
    driver: bridge
    name: ysense_network

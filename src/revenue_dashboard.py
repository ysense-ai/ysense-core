# src/revenue_dashboard.py
"""
YSense™ Platform v4.1 - Revenue Transparency Dashboard
Z Protocol v2.0 Compliant - Public & Private Revenue Visibility
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
from typing import Dict, List, Optional
from .consent_database import consent_db

def display_public_revenue_dashboard():
    """Display public revenue transparency dashboard (accessible to all users)"""

    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
    ">
        <h2 style="margin: 0;">💰 Revenue Transparency Dashboard</h2>
        <p style="margin: 5px 0;">Public visibility into platform revenue distribution - Z Protocol v2.0</p>
    </div>
    """, unsafe_allow_html=True)

    # Get public revenue data
    revenue_data = consent_db.get_public_revenue_dashboard()

    if not revenue_data:
        st.info("📊 No revenue data available yet. Check back after first platform transactions.")
        return

    # Key Metrics
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            "Total Platform Revenue",
            f"€{revenue_data.get('total_revenue', 0):,.2f}",
            help="Total revenue generated by the platform"
        )

    with col2:
        st.metric(
            "Total Contributors",
            f"{revenue_data.get('total_contributors', 0):,}",
            help="Number of wisdom contributors"
        )

    with col3:
        avg_per_contributor = (
            revenue_data.get('total_revenue', 0) / revenue_data.get('total_contributors', 1)
            if revenue_data.get('total_contributors', 0) > 0 else 0
        )
        st.metric(
            "Avg per Contributor",
            f"€{avg_per_contributor:,.2f}",
            help="Average revenue per contributor"
        )

    with col4:
        community_fund = revenue_data.get('community_fund_total', 0)
        st.metric(
            "Community Fund",
            f"€{community_fund:,.2f}",
            help="Total community benefit fund"
        )

    st.markdown("---")

    # Revenue by Tier
    st.markdown("### 📊 Revenue Distribution by Tier")

    tier_data = {
        "Tier": ["PUBLIC", "PERSONAL", "CULTURAL", "SACRED", "THERAPEUTIC"],
        "Revenue": [
            revenue_data.get('public_tier_revenue', 0),
            revenue_data.get('personal_tier_revenue', 0),
            revenue_data.get('cultural_tier_revenue', 0),
            revenue_data.get('sacred_tier_revenue', 0),
            revenue_data.get('therapeutic_tier_revenue', 0)
        ],
        "Share %": ["15%", "20%", "25%", "30%", "25%"]
    }

    df_tiers = pd.DataFrame(tier_data)

    # Pie chart
    fig_pie = go.Figure(data=[go.Pie(
        labels=df_tiers['Tier'],
        values=df_tiers['Revenue'],
        hole=0.4,
        marker_colors=['#667eea', '#764ba2', '#f093fb', '#4facfe', '#43e97b']
    )])

    fig_pie.update_layout(
        title="Revenue Distribution by Tier",
        height=400
    )

    st.plotly_chart(fig_pie, use_container_width=True)

    # Table
    st.dataframe(df_tiers, use_container_width=True)

    st.markdown("---")

    # Revenue Sharing Breakdown
    st.markdown("### 💸 Revenue Sharing Breakdown")

    total_rev = revenue_data.get('total_revenue', 0)

    breakdown_data = {
        "Category": [
            "Contributors (15-30%)",
            "Platform Operations (45-70%)",
            "Community & Research Funds (15-25%)"
        ],
        "Amount (€)": [
            total_rev * 0.225,  # Average 22.5% to contributors
            total_rev * 0.575,  # Average 57.5% to platform
            total_rev * 0.20    # 20% to funds
        ],
        "Percentage": ["22.5%", "57.5%", "20%"]
    }

    df_breakdown = pd.DataFrame(breakdown_data)

    fig_bar = px.bar(
        df_breakdown,
        x="Category",
        y="Amount (€)",
        text="Percentage",
        color="Category",
        color_discrete_sequence=['#667eea', '#764ba2', '#43e97b']
    )

    fig_bar.update_layout(
        title="Platform Revenue Allocation",
        height=400,
        showlegend=False
    )

    st.plotly_chart(fig_bar, use_container_width=True)

    # Transparency Statement
    st.markdown("""
    <div style="
        background: #f8f9fa;
        border-left: 4px solid #667eea;
        padding: 15px;
        margin: 20px 0;
    ">
        <h4>🛡️ Z Protocol v2.0 Transparency Commitment</h4>
        <ul>
            <li>✅ <b>100% Visibility</b>: All revenue data publicly accessible</li>
            <li>✅ <b>Real-time Updates</b>: Dashboard updated as transactions occur</li>
            <li>✅ <b>Fair Distribution</b>: 15-30% revenue share to contributors</li>
            <li>✅ <b>Community Funds</b>: Dedicated funds for cultural preservation and research</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)


def display_user_revenue_dashboard(user_id: str):
    """Display personalized revenue dashboard for a user"""

    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        color: white;
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
    ">
        <h2 style="margin: 0;">💰 Your Revenue Dashboard</h2>
        <p style="margin: 5px 0;">Personal earnings and contribution insights</p>
    </div>
    """, unsafe_allow_html=True)

    # Get user revenue data
    user_data = consent_db.get_user_revenue_dashboard(user_id)

    if user_data['total_submissions'] == 0:
        st.info("""
        📊 **No earnings yet**

        Start sharing your wisdom to earn revenue:
        - Submit wisdom with AI training consent
        - Choose your content tier (15-30% revenue share)
        - Track your earnings in real-time
        """)
        return

    # Key Metrics
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric(
            "Total Earned",
            f"€{user_data['total_earned']:,.2f}",
            help="Your total earnings from wisdom contributions"
        )

    with col2:
        st.metric(
            "Total Submissions",
            f"{user_data['total_submissions']:,}",
            help="Number of wisdom submissions with AI training consent"
        )

    with col3:
        avg_per_submission = (
            user_data['total_earned'] / user_data['total_submissions']
            if user_data['total_submissions'] > 0 else 0
        )
        st.metric(
            "Avg per Submission",
            f"€{avg_per_submission:,.2f}",
            help="Average earnings per wisdom submission"
        )

    st.markdown("---")

    # Earnings by Tier
    st.markdown("### 📊 Your Earnings by Tier")

    if user_data['by_tier']:
        tier_df = pd.DataFrame(user_data['by_tier'])

        fig_tier = px.bar(
            tier_df,
            x='tier',
            y='tier_revenue',
            text='tier_count',
            color='tier',
            labels={'tier': 'Content Tier', 'tier_revenue': 'Revenue (€)', 'tier_count': 'Submissions'},
            color_discrete_sequence=px.colors.qualitative.Vivid
        )

        fig_tier.update_layout(
            title="Revenue by Content Tier",
            height=400,
            showlegend=False
        )

        st.plotly_chart(fig_tier, use_container_width=True)

        # Table
        st.dataframe(tier_df, use_container_width=True)
    else:
        st.info("No tier-based revenue data yet.")

    st.markdown("---")

    # Recent Earnings
    st.markdown("### 📈 Recent Earnings")

    if user_data['recent_earnings']:
        recent_df = pd.DataFrame(user_data['recent_earnings'])

        # Format columns
        recent_df['created_at'] = pd.to_datetime(recent_df['created_at']).dt.strftime('%Y-%m-%d %H:%M')
        recent_df['revenue_earned'] = recent_df['revenue_earned'].apply(lambda x: f"€{x:.2f}")
        recent_df['revenue_share_percentage'] = recent_df['revenue_share_percentage'].apply(lambda x: f"{x*100:.0f}%")

        st.dataframe(
            recent_df[[
                'created_at', 'tier', 'revenue_earned',
                'revenue_share_percentage', 'payout_status'
            ]],
            use_container_width=True
        )
    else:
        st.info("No recent earnings to display.")

    st.markdown("---")

    # Payout Information
    st.markdown("### 💸 Payout Information")

    st.info("""
    **Payout Schedule:**
    - 📅 **Monthly payouts** on the 1st of each month
    - 💰 **Minimum threshold**: €10.00
    - 🔐 **Payment method**: Crypto wallet or bank transfer
    - ⏱️ **Processing time**: 3-5 business days

    **Current Status:**
    - Pending earnings will be paid in the next cycle
    - Check your email for payout notifications
    """)

    # Download earnings report
    if st.button("📥 Download Earnings Report (CSV)"):
        # Generate CSV
        csv_data = pd.DataFrame(user_data['recent_earnings']).to_csv(index=False)

        st.download_button(
            label="Download CSV",
            data=csv_data,
            file_name=f"ysense_earnings_{user_id}_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv"
        )


def display_revenue_tier_calculator():
    """Interactive calculator to show potential revenue by tier"""

    st.markdown("### 🧮 Revenue Tier Calculator")

    st.info("Calculate your potential earnings based on platform usage and content tier")

    # Input parameters
    col1, col2 = st.columns(2)

    with col1:
        platform_revenue = st.number_input(
            "Estimated Platform Revenue (€)",
            min_value=0.0,
            max_value=1000000.0,
            value=10000.0,
            step=1000.0,
            help="Total platform revenue from AI licensing"
        )

    with col2:
        your_contribution = st.slider(
            "Your Contribution Share (%)",
            min_value=0.1,
            max_value=10.0,
            value=1.0,
            step=0.1,
            help="Percentage of total platform content"
        )

    # Calculate for each tier
    tiers = {
        "PUBLIC (15%)": 0.15,
        "PERSONAL (20%)": 0.20,
        "CULTURAL (25%)": 0.25,
        "SACRED (30%)": 0.30,
        "THERAPEUTIC (25%)": 0.25
    }

    calc_data = {
        "Tier": [],
        "Your Share (€)": [],
        "Monthly (€)": [],
        "Annual (€)": []
    }

    for tier_name, revenue_share in tiers.items():
        your_base = platform_revenue * (your_contribution / 100)
        your_earnings = your_base * revenue_share

        calc_data["Tier"].append(tier_name)
        calc_data["Your Share (€)"].append(f"€{your_earnings:,.2f}")
        calc_data["Monthly (€)"].append(f"€{your_earnings:,.2f}")
        calc_data["Annual (€)"].append(f"€{your_earnings * 12:,.2f}")

    df_calc = pd.DataFrame(calc_data)

    st.dataframe(df_calc, use_container_width=True)

    st.success(f"""
    **Example Calculation:**
    - Platform Revenue: €{platform_revenue:,.2f}
    - Your Contribution: {your_contribution}%
    - Your Base Share: €{platform_revenue * (your_contribution/100):,.2f}

    Choose higher tiers (Cultural, Sacred) for maximum revenue share!
    """)
